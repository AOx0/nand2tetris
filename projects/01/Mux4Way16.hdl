// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // Put your code here:
    // s0;
	Not(in=sel[0], out=ns0);
	Not(in=sel[1], out=ns1);
	And(a=ns0, b=ns1, out=s0);
    // s1:
	Xor(a=sel[0],b=sel[1],out=ns2);
	And(a=sel[0],b=ns2,out=s1);
    // s2:
	And(a=sel[1],b=ns2,out=s2);
    // s3:
    And(a=sel[0], b=sel[1], out=s3);
    And16(
a[0]=s0, a[1]=s0, a[2]=s0, a[3]=s0,
a[4]=s0, a[5]=s0, a[6]=s0, a[7]=s0,
a[8]=s0, a[9]=s0, a[10]=s0, a[11]=s0,
a[12]=s0, a[13]=s0, a[14]=s0, a[15]=s0,
	b[0..15]=a, out[0..15]=oa);
    And16(
a[0]=s1, a[1]=s1, a[2]=s1, a[3]=s1,
a[4]=s1, a[5]=s1, a[6]=s1, a[7]=s1,
a[8]=s1, a[9]=s1, a[10]=s1, a[11]=s1,
a[12]=s1, a[13]=s1, a[14]=s1, a[15]=s1,
	b[0..15]=b, out[0..15]=ob);
    And16(
a[0]=s2, a[1]=s2, a[2]=s2, a[3]=s2,
a[4]=s2, a[5]=s2, a[6]=s2, a[7]=s2,
a[8]=s2, a[9]=s2, a[10]=s2, a[11]=s2,
a[12]=s2, a[13]=s2, a[14]=s2, a[15]=s2,
	b[0..15]=c, out[0..15]=oc);
    And16(
	a[0]=s3, b[0]=d[0],
	a[1]=s3, b[1]=d[1],
	a[2]=s3, b[2]=d[2],
	a[3]=s3, b[3]=d[3],
	a[4]=s3, b[4]=d[4],
	a[5]=s3, b[5]=d[5],
	a[6]=s3, b[6]=d[6],
	a[7]=s3, b[7]=d[7],
	a[8]=s3, b[8]=d[8],
	a[9]=s3, b[9]=d[9],
	a[10]=s3, b[10]=d[10],
	a[11]=s3, b[11]=d[11],
	a[12]=s3, b[12]=d[12],
	a[13]=s3, b[13]=d[13],
	a[14]=s3, b[14]=d[14],
	a[15]=s3, b[15]=d[15], out[0..15]=od
    );
	Or16(a[0..15]=oa, b[0..15]=ob, out[0..15]=or1);
	Or16(a[0..15]=oc, b[0..15]=od, out[0..15]=or2);
	Or16(a[0..15]=or1, b[0..15]=or2, out[0..15]=out);
}
